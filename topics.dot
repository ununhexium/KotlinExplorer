digraph g { 

"Value"
"Variables"
"Null"
"Print"
"Comments"
"Nested comments"
"Function"
"Main"
"Integers"
"Boolean"
"Floats"
"Characters"
"String"
"String concatenation, split, ..."
"String templates"
"Deferred assignment"
"Type inference for variables"
"Unary plus"
"Unary minus"
"Operators overload"
"Type inference for functions"
"Top level declaration"
"Function"
"Return"
"Unit"
"fun foo() = notation"
"Closures"
"Main cli args"
"Constant"
"Escape sequence"
"If else"
"When"
"Expression assignment"
"While"
"Do while"
"Continue"
"Math"
"List"
"Array"
"Integer range"
"x in a..b"
"x !in a..b"
"Package"
"Import"
"Classes"
"Default constructor"
"Class fields (in constructor)"
"Class properties"
"Open class"
"Abstract classes"
"Interface"
"As operator"
"Is operator"
"Delegate pattern"
"As operator"



"Null" -> "Value"
"Null" -> "Variables"




"Main" -> "Function"
"Integers" -> "Value"
"Boolean" -> "Value"
"Floats" -> "Value"
"Characters" -> "Value"
"String" -> "Value"
"String concatenation, split, ..." -> "String"
"String templates" -> "String"
"Deferred assignment" -> "Data types"

"Unary plus" -> "Integers"
"Unary minus" -> "Integers"

"Type inference for functions" -> "Value"
"Type inference for functions" -> "Variables"
"Top level declaration" -> "Data types"
"Function" -> "Integers"
"Function" -> "Function"
"Return" -> "Integers"
"Return" -> "Function"
"Unit" -> "Return"
"fun foo() = notation" -> "Function"
"fun foo() = notation" -> "Integers"
"Closures" -> "Function"
"Closures" -> "Value"
"Closures" -> "Type inference for functions"
"Main cli args" -> "Main"
"Constant" -> "Value"
"Escape sequence" -> "Comments"
"If else" -> "Boolean"
"When" -> "If else"
"Expression assignment" -> "If else"
"While" -> "If else"
"Do while" -> "If else"
"Continue" -> "While"
"Continue" -> "If else"
"Math" -> "Function"






"Import" -> "Package"
"Classes" -> "Function"
"Default constructor" -> "Classes"
"Class fields (in constructor)" -> "Classes"
"Class properties" -> "Classes"
"Open class" -> "Classes"
"Abstract classes" -> "Classes"
"Interface" -> "Classes"
"Interface" -> "Abstract classes"
"As operator" -> "Classes"
"Is operator" -> "Classes"
"Delegate pattern" -> "Classes"
"Delegate pattern" -> "Interface"
"As operator" -> "Classes"
}